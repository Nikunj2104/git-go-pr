---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import StatusMessage from '../components/StatusMessage.astro';
import UserTable from '../components/UserTable.astro';
import PRModal from '../components/PRModal.astro';
---

<Layout title="Admin Dashboard - GITGOPR">
  <Navbar />
  
  <main class="min-h-screen bg-black text-green-100 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="mb-8 flex justify-between items-start">
        <div>
          <h1 class="text-3xl font-bold text-green-400 font-mono mb-2">Admin Dashboard</h1>
          <p class="text-green-300 font-mono">Monitor user activity and PR statistics</p>
        </div>
        <button 
          id="refresh-all-btn" 
          class="bg-green-600 hover:bg-green-700 text-white font-mono px-6 py-3 rounded-lg transition duration-200 flex items-center gap-2"
        >
          <span id="refresh-icon">üîÑ</span>
          <span id="refresh-text">Refresh All PRs</span>
        </button>
      </div>

      <div id="loading" class="text-center py-8">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-400 mx-auto"></div>
        <p class="mt-4 text-green-300 font-mono">Loading dashboard data...</p>
      </div>

      <StatusMessage id="refresh-status" />

      <!-- Real-time Progress Display -->
      <div id="refresh-progress" class="hidden bg-gray-900 border border-green-600 rounded-lg p-6 mb-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-bold text-green-400 font-mono">Fetching PRs...</h3>
          <span id="progress-counter" class="text-green-300 font-mono text-sm">0 / 0</span>
        </div>
        <div class="w-full bg-gray-800 rounded-full h-4 mb-4">
          <div id="progress-bar" class="bg-green-500 h-4 rounded-full transition-all duration-300" style="width: 0%"></div>
        </div>
        <div id="current-user" class="text-green-300 font-mono text-sm flex items-center gap-2">
          <span class="animate-pulse">‚è≥</span>
          <span id="current-user-text">Preparing...</span>
        </div>
        <div id="progress-log" class="mt-4 max-h-48 overflow-y-auto space-y-1">
          <!-- Progress messages will be added here -->
        </div>
      </div>

      <div id="error" class="hidden bg-red-900 border border-red-600 rounded-lg p-4 mb-6">
        <p class="text-red-100 font-mono">Error loading data. Please try again.</p>
      </div>

      <div id="dashboard-content" class="hidden">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div class="bg-gray-900 border border-green-600 rounded-lg p-6">
            <p class="text-green-300 font-mono text-sm">Total Users</p>
            <p class="text-2xl font-bold text-green-100 font-mono" id="total-users">-</p>
          </div>
          <div class="bg-gray-900 border border-green-600 rounded-lg p-6">
            <p class="text-green-300 font-mono text-sm">Total PRs</p>
            <p class="text-2xl font-bold text-green-100 font-mono" id="total-prs">-</p>
          </div>
          <div class="bg-gray-900 border border-green-600 rounded-lg p-6">
            <p class="text-green-300 font-mono text-sm">Open PRs</p>
            <p class="text-2xl font-bold text-green-100 font-mono" id="open-prs">-</p>
          </div>
          <div class="bg-gray-900 border border-green-600 rounded-lg p-6">
            <p class="text-green-300 font-mono text-sm">Merged PRs</p>
            <p class="text-2xl font-bold text-green-100 font-mono" id="merged-prs">-</p>
          </div>
        </div>

        <UserTable id="users-table-body" />
      </div>
    </div>

    <PRModal />
  </main>
</Layout>

<script>
  const API_BASE = import.meta.env.MODE == 'development' ? 'http://localhost:4000' : '';
  let adminPassword = localStorage.getItem('adminPassword') || '';

  // Check if admin is authenticated
  function checkAdminAuth() {
    if (!adminPassword) {
      const password = prompt('Enter admin password:');
      if (!password) {
        window.location.href = '/';
        return false;
      }
      adminPassword = password;
      localStorage.setItem('adminPassword', password);
    }
    return true;
  }




  interface User {
    _id: string;
    username: string;
    display_name: string | null;
    avatar_url: string | null;
    full_name: string | null;
    role: string | null;
    college: {
      _id: string;
      name: string;
    } | null;
    year: string | null;
    instructor: string | null;
    pr_count: number;
    github_prs: any[] | null;
  }

  interface PR {
    _id: string;
    pr_number: number;
    title: string;
    url: string;
    repository: {
      _id: string;
      name: string;
      owner: {
        _id: string;
        username: string;
      };
    };
    state: 'open' | 'closed' | 'merged';
    createdAt: string;
  }



  async function loadDashboardData() {
    if (!checkAdminAuth()) return;

    const loadingElem = document.getElementById('loading') as HTMLElement;
    const dashboardContent = document.getElementById('dashboard-content') as HTMLElement;
    const errorElem = document.getElementById('error') as HTMLElement;

    
    try {
      // Load stats with admin password
      const statsResponse = await fetch(API_BASE + '/api/admin/stats?adminPassword=' + encodeURIComponent(adminPassword));
      
      if (statsResponse.status === 401) {
        localStorage.removeItem('adminPassword');
        alert('Invalid admin password. Please try again.');
        window.location.reload();
        return;
      }
      
      const stats = await statsResponse.json();

      const totalUsersElem = document.getElementById('total-users') as HTMLElement;
      const totalPRsElem = document.getElementById('total-prs') as HTMLElement;
      const openPRsElem = document.getElementById('open-prs') as HTMLElement;
      const mergedPRsElem = document.getElementById('merged-prs') as HTMLElement;

      totalUsersElem.textContent = stats.totalUsers;
      totalPRsElem.textContent = stats.totalPRs;
      openPRsElem.textContent = stats.openPRs;
      mergedPRsElem.textContent = stats.mergedPRs;

      const usersResponse = await fetch(API_BASE + '/api/admin/users?adminPassword=' + encodeURIComponent(adminPassword));
      
      if (usersResponse.status === 401) {
        localStorage.removeItem('adminPassword');
        alert('Session expired. Please login again.');
        window.location.reload();
        return;
      }

      const usersData: { users: User[] } = await usersResponse.json();
      
      // Use template-based user table rendering
      const tableBody = document.querySelector('[data-user-table]') as HTMLElement;
      if (tableBody && window.populateUserTable) {
        window.populateUserTable(tableBody, usersData.users);
      }



      loadingElem.classList.add('hidden');
      dashboardContent.classList.remove('hidden');
    } catch (error) {
      console.error('Error loading dashboard data:', error);
      loadingElem.classList.add('hidden');
      errorElem.classList.remove('hidden');
    }
  }

  async function viewUserPRs(userId: string, username: string) {
    try {
      const adminPassword = localStorage.getItem('adminPassword') || '';
      const response = await fetch(API_BASE + '/api/admin/users/' + userId + '/prs?adminPassword=' + encodeURIComponent(adminPassword));
      
      if (response.status === 401) {
        localStorage.removeItem('adminPassword');
        alert('Session expired. Please login again.');
        window.location.reload();
        return;
      }
      
      const data = await response.json();
      
      // Use template-based PR modal rendering
      const modalElement = document.querySelector('[data-pr-modal]') as HTMLElement;
      const titleElement = document.getElementById('modal-title') as HTMLElement;
      const contentElement = document.querySelector('[data-modal-content]') as HTMLElement;
      
      if (modalElement && titleElement && contentElement && window.populatePRModal) {
        window.populatePRModal(modalElement, titleElement, contentElement, username, data.prs);
      }
    } catch (error) {
      console.error('Error loading user PRs:', error);
    }
  }

  // Setup PR modal handlers using template component
  const modalElement = document.querySelector('[data-pr-modal]') as HTMLElement;
  if (modalElement && window.setupPRModalHandlers) {
    window.setupPRModalHandlers(modalElement);
  }

  // Polling interval for status updates
  let pollingInterval: number | null = null;

  // Manual refresh all PRs function with background job and polling
  async function refreshAllPRs() {
    const refreshBtn = document.getElementById('refresh-all-btn') as HTMLButtonElement;
    const refreshIcon = document.getElementById('refresh-icon') as HTMLElement;
    const refreshText = document.getElementById('refresh-text') as HTMLElement;
    const refreshStatus = document.getElementById('refresh-status') as HTMLElement;
    const progressContainer = document.getElementById('refresh-progress') as HTMLElement;
    const progressBar = document.getElementById('progress-bar') as HTMLElement;
    const progressCounter = document.getElementById('progress-counter') as HTMLElement;
    const currentUserText = document.getElementById('current-user-text') as HTMLElement;
    const progressLog = document.getElementById('progress-log') as HTMLElement;

    // Disable button and show loading state
    refreshBtn.disabled = true;
    refreshBtn.classList.add('opacity-50', 'cursor-not-allowed');
    refreshIcon.classList.add('animate-spin');
    refreshText.textContent = 'Starting...';
    
    // Show progress container and clear log
    progressContainer.classList.remove('hidden');
    progressLog.innerHTML = '';
    
    try {
      const adminPassword = localStorage.getItem('adminPassword') || '';
      
      // Start the background job
      const startResponse = await fetch(API_BASE + '/api/admin/refresh-all?adminPassword=' + encodeURIComponent(adminPassword), {
        method: 'POST'
      });
      
      if (!startResponse.ok) {
        throw new Error('Failed to start refresh');
      }
      
      const startData = await startResponse.json();
      if (!startData.success) {
        throw new Error(startData.message || 'Failed to start refresh');
      }
      
      refreshText.textContent = 'Refreshing...';
      let lastProcessed = 0;
      const seenUsers = new Set();
      
      // Poll for status updates
      pollingInterval = window.setInterval(async () => {
        try {
          const statusResponse = await fetch(API_BASE + '/api/admin/refresh-status?adminPassword=' + encodeURIComponent(adminPassword));
          const status = await statusResponse.json();
          
          // Update UI
          const percentage = status.totalUsers > 0 ? (status.processed / status.totalUsers) * 100 : 0;
          progressBar.style.width = `${percentage}%`;
          progressCounter.textContent = `${status.processed} / ${status.totalUsers}`;
          
          if (status.currentUser) {
            currentUserText.textContent = `Fetching PRs for @${status.currentUser}...`;
          }
          
          // Add new logs
          if (status.recentLogs && status.recentLogs.length > 0) {
            for (const log of status.recentLogs.slice().reverse()) {
              const key = `${log.username}-${log.status}`;
              if (!seenUsers.has(key)) {
                seenUsers.add(key);
                const logEntry = document.createElement('div');
                if (log.status === 'success') {
                  logEntry.className = 'text-sm text-green-400 font-mono';
                  logEntry.innerHTML = `<span>‚úì</span> @${log.username} - Done!`;
                } else {
                  logEntry.className = 'text-sm text-red-400 font-mono';
                  logEntry.innerHTML = `<span>‚úó</span> @${log.username} - Error: ${log.error || 'Unknown error'}`;
                }
                progressLog.appendChild(logEntry);
              }
            }
            progressLog.scrollTop = progressLog.scrollHeight;
          }
          
          // Check if complete
          if (!status.isRunning && status.processed > 0) {
            clearInterval(pollingInterval!);
            currentUserText.textContent = 'All users completed!';
            
            // Show success message
            if (window.showStatusMessage) {
              window.showStatusMessage(refreshStatus, {
                type: 'success',
                title: 'Refresh completed successfully!',
                message: 'All user PR data has been updated.',
                details: `Successful: ${status.successful} | Errors: ${status.errors}`
              });
            }
            
            // Reload dashboard data
            setTimeout(() => {
              loadDashboardData();
              progressContainer.classList.add('hidden');
            }, 2000);
            
            // Re-enable button
            refreshBtn.disabled = false;
            refreshBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            refreshIcon.classList.remove('animate-spin');
            refreshText.textContent = 'Refresh All PRs';
          }
        } catch (error) {
          console.error('Polling error:', error);
        }
      }, 1000); // Poll every second
      
    } catch (error) {
      console.error('Error starting refresh:', error);
      if (pollingInterval) {
        clearInterval(pollingInterval);
      }
      
      if (window.showStatusMessage) {
        window.showStatusMessage(refreshStatus, {
          type: 'error',
          message: 'Error starting refresh. Please try again.'
        });
      }
      
      // Re-enable button
      refreshBtn.disabled = false;
      refreshBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      refreshIcon.classList.remove('animate-spin');
      refreshText.textContent = 'Refresh All PRs';
      progressContainer.classList.add('hidden');
    }
  }

  // Add event listener to refresh button
  (document.getElementById('refresh-all-btn') as HTMLButtonElement).addEventListener('click', refreshAllPRs);

  loadDashboardData();

  declare global {
    interface Window {
      viewUserPRs: (userId: string, username: string) => void
    }
  }

  window.viewUserPRs = viewUserPRs;
</script>
